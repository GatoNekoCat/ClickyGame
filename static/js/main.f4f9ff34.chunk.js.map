{"version":3,"sources":["components/Nav/Nav.js","components/Container/Container.js","components/Title/Title.js","components/DBZCard/DBZCard.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","id","lastChoice","score","highScore","Container","children","Title","DBZCard","value","onClick","clickEvent","alt","name","src","image","App","state","characters","clicked","_this","indexOf","addScore","setState","concat","newScore","boardShuffle","shuffledArray","array","i","length","j","Math","floor","random","_ref","shuffleArray","_this2","this","components_Container_Container","components_Nav_Nav","components_Title_Title","map","character","components_DBZCard_DBZCard","key","takeTurn","gameReset","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f9ff34.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./nav.css\";\r\n\r\nconst Nav = props => (\r\n    <nav className=\"navbar-nav\">\r\n        <ul>\r\n            <li className=\"navbar-brand\">\r\n                <a href=\"/clickyGame/\">Clicky Game</a>\r\n            </li>\r\n            <li id='last-choice'>\r\n                {props.lastChoice}\r\n            </li>\r\n            <li id=\"score\">\r\n                Score: {props.score}\r\n            </li>\r\n            <li id=\"top-score\">\r\n                Score: {props.highScore}\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default Nav;","import React from \"react\";\r\nimport \"./Container.css\";\r\n\r\n\r\n//main container to pass into \r\nconst Container = props => <div className=\"container\">{props.children}</div>;\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./DBZCard.css\";\r\n\r\nconst DBZCard = props => (\r\n  <div \r\n    className=\"card\" \r\n    value={props.id} \r\n    onClick={() => props.clickEvent(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default DBZCard;","import React, { Component } from 'react';\nimport Nav from './components/Nav';\nimport Container from './components/Container';\nimport characters from './dbz.json';\nimport Title from './components/Title';\nimport DBZCard from './components/DBZCard';\n\nimport './App.css';\n\n// shuffleArray takes in an array and then generates\n// a random number for each element in the array\n// and switches the current index with the random index\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    //generate a random index to switch with\n    let j = Math.floor(Math.random() * (i + 1));\n    // switch the index of the array using our random num\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    highScore: 0,\n    lastChoice: \"\",\n    clicked: [],\n  };\n\n  //clickEvent takes in the id of the clicked character,\n  // and checks if it is not in the state.clicked array. If so, call the addScore method\n  clickEvent = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.addScore(); // add the id of the clicked character to the clicked array\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.setState({\n        score: 0,\n        lastChoice: \"WRONG\",\n        clicked: []\n      });\n    }\n  };\n\n  addScore = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      lastChoice: \"\"\n    });\n    //If the newscore is higher than the highscore state,\n    // set highscore state to newscore\n    if (newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore });\n      //If the user reaches 12 they win\n    } else if (newScore === 12) {\n      this.setState({ lastChoice: \"Winnar!!\" });\n    } //Shuffle the board after a win\n    this.boardShuffle();\n  };\n\n\n  boardShuffle = () => {\n    let shuffledArray = shuffleArray(characters);\n    this.setState({ characters: shuffledArray });\n  };\n\n  render() {\n    return (\n      <Container>\n        <div className=\"App\">\n\n          <header className=\"App-header\">\n            <Nav\n              lastChoice={this.state.lastChoice} \n              score={this.state.score}\n              highScore={this.state.highScore}              \n            />\n            <Title>\n              Click Each Picture ONCE\n            </Title>\n\n          </header>\n          <div className=\"container\">\n            {this.state.characters.map(character =>\n              <DBZCard\n                key={character.id}\n                clickEvent={this.clickEvent}\n                takeTurn={this.takeTurn}\n                gameReset={this.gameReset}\n                boardShuffle={this.boardShuffle}\n                id={character.id}\n                image={character.image}\n              />\n            )}\n          </div>\n        </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}